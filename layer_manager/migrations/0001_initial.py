# Generated by Django 4.1.9 on 2023-05-15 12:14

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(help_text='WMS Layer is requested by using this name in the                                                                                LAYERS parameter of a GetMap request.', max_length=250)),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LayerCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='WMS Layer Category name', max_length=250)),
                ('description', models.CharField(help_text='WMS Layer Category description', max_length=250)),
            ],
            options={
                'verbose_name_plural': 'Layer Categories',
            },
        ),
        migrations.CreateModel(
            name='Legend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the Legend', max_length=50, verbose_name='Title')),
                ('legend_type', models.CharField(choices=[('basic', 'Basic'), ('gradient', 'Gradient'), ('cholorpleth', 'Cholorpleth')], default='basic', max_length=50, verbose_name='Legend Type')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LegendItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('item_val', models.CharField(help_text="Can be a number or text e.g '10' or '10-20' or 'Vegetation'", max_length=50, verbose_name='Value')),
                ('item_color', models.CharField(help_text='Color denoting the value e.g rgb(73,73,73) or #494949', max_length=50, verbose_name='Color')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Param',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(help_text='Name of the parameter', max_length=250)),
                ('value', models.CharField(help_text='Value of the parameter', max_length=250)),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WMSRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of your layer', max_length=250, verbose_name='Layer Title')),
                ('subtitle', models.CharField(blank=True, help_text='Subtitle of your layer', max_length=250, null=True, verbose_name='Layer Subtitle')),
                ('base_url', models.CharField(default='http://20.56.94.119/gsky/ows/gfs', help_text='BASE URL for WMS', max_length=250, verbose_name='BASE URL for WMS')),
                ('version', models.CharField(default='1.1.1', help_text='WMS Version', max_length=50, verbose_name='WMS Version')),
                ('width', models.IntegerField(default=250, help_text='The size of the map image in pixels along the i axis', verbose_name='Pixel Width')),
                ('height', models.IntegerField(default=250, help_text='The size of the map image in pixels along the j axis', verbose_name='Pixel Height')),
                ('transparent', models.BooleanField(default=True, help_text='Ability of underlying maps to be visible or not', verbose_name='Transparency')),
                ('srs', models.CharField(default='EPSG:3857', help_text='WMS Spatial Reference e.g EPSG:3857', max_length=50, verbose_name='Spatial Reference System')),
                ('format', models.CharField(choices=[('image/png', 'PNG'), ('image/jpeg', 'JPEG'), ('image/svg+xml', 'SVG'), ('image/gif', 'GIF')], default='image/png', help_text='Allowed map formats are either “picture” formats or “graphic element” formats. ', max_length=50, verbose_name='Output Format')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='layer_manager.layercategory', verbose_name='Layer Categories')),
            ],
            options={
                'verbose_name': 'WMS Request',
                'verbose_name_plural': 'WMS Requests',
            },
        ),
        migrations.CreateModel(
            name='WMSStyle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(help_text="The style's Name is used in the Map request STYLES parameter", max_length=250)),
                ('wms_request', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='styles', to='layer_manager.wmsrequest', verbose_name='WMS Styles')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
