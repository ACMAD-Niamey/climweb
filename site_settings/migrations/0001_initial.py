# Generated by Django 4.1.7 on 2023-03-10 12:39

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import wagtail.blocks
import wagtail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0083_workflowcontenttype'),
        ('wagtailimages', '0025_alter_image_file_alter_rendition_file'),
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('iso', models.CharField(max_length=100)),
                ('size', models.CharField(max_length=100)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(help_text='The paired values of points defining a polygon that delineates the affected area of the alert message', null=True, srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='OtherSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wagtail_form_key', models.CharField(blank=True, help_text='A Unique key for managing submitted forms', max_length=255)),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganisationSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('twitter', models.URLField(blank=True, help_text='Twitter url', max_length=250, null=True)),
                ('facebook', models.URLField(blank=True, help_text='Facebook url', max_length=250, null=True)),
                ('youtube', models.URLField(blank=True, help_text='Youtube url', max_length=250, null=True)),
                ('instagram', models.URLField(blank=True, help_text='Instagram url', max_length=250, null=True)),
                ('phone', models.IntegerField(blank=True, help_text='Phone Number', null=True)),
                ('email', models.EmailField(blank=True, help_text='Email address', max_length=254, null=True)),
                ('address', wagtail.fields.RichTextField(blank=True, help_text='Postal Address', max_length=250, null=True)),
                ('country', models.ForeignKey(default='Ethiopia', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='country_setting', to='site_settings.country')),
                ('logo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurementSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temp_units', models.CharField(choices=[('celsius', '°C'), ('fareinheit', '°F')], default='celsius', max_length=255)),
                ('wind_units', models.CharField(choices=[('knots', 'knots'), ('km_p_hr', 'km/h'), ('m_p_s', 'm/s')], default='km_p_hr', max_length=255)),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LanguageSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('languages', wagtail.fields.StreamField([('languages', wagtail.blocks.StructBlock([('prefix', wagtail.blocks.CharBlock(max_length=5)), ('language', wagtail.blocks.CharBlock(max_length=20)), ('default', wagtail.blocks.BooleanBlock(required=False))]))], blank=True, null=True, use_json_field=False)),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'verbose_name': 'Languages',
            },
        ),
        migrations.CreateModel(
            name='IntegrationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('youtube_api', models.CharField(blank=True, help_text='To set up Youtube API Key refer to https://developers.google.com/youtube/v3/getting-started', max_length=50, verbose_name='Youtube API Key')),
                ('mailchimp_api', models.CharField(blank=True, help_text='To set up Mailchimp API Key refer to ', max_length=50, verbose_name='Mailchimp API Key')),
                ('zoom_api_key', models.CharField(blank=True, help_text='To set up Zoom API Key refer to ', max_length=50, verbose_name='Zoom API Key')),
                ('zoom_api_secret', models.CharField(blank=True, help_text='To set up Zoom Secret Key refer to ', max_length=50, verbose_name='Zoom Secret Key')),
                ('ga_tracking_id', models.CharField(blank=True, help_text='Your Google Analytics tracking ID (begins with "UA-")', max_length=255, verbose_name='GA Tracking ID')),
                ('ga_track_button_clicks', models.BooleanField(default=False, help_text='Track all button clicks using Google Analytics event tracking, Event tracking details can be specified in each button’s advanced settings options.', verbose_name='Track button clicks')),
                ('track_internally', models.BooleanField(default=False, help_text='Track   all pages internally. This will enable the internal analytics dashboard, alongside Google Analytics, if also enabled', verbose_name='Track pages internally')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
