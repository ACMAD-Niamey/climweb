# Generated by Django 4.1.7 on 2023-02-28 22:02

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import timezone_field.fields
import wagtail.blocks
import wagtail.contrib.forms.models
import wagtail.documents.blocks
import wagtail.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0006_eventtype'),
        ('wagtailimages', '0025_alter_image_file_alter_rendition_file'),
        ('wagtailcore', '0083_workflowcontenttype'),
        ('projects', '0003_alter_projectpage_feature_block_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventRegistrationFormTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_name', models.CharField(max_length=200)),
                ('validation_field', models.CharField(default='email_address', max_length=200)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventRegistrationPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, validators=[wagtail.contrib.forms.models.validate_to_address], verbose_name='to address')),
                ('from_address', models.EmailField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('subscriber_json_data', models.TextField(blank=True, verbose_name='Mailing List Settings')),
                ('enable_mailing_list_subscription', models.BooleanField(default=False)),
                ('mailing_list_checkbox_label', models.CharField(blank=True, max_length=200)),
                ('zoom_json_data', models.TextField(blank=True, verbose_name='Zoom Settings')),
                ('enable_adding_registrants', models.BooleanField(default=False, help_text='Check to enable zoom integration', verbose_name='Enable registrations - Note: Works for zoom meetings or webinars with Registration enabled ')),
                ('is_webinar', models.BooleanField(default=False, help_text='Is this a webinar ? Leave unchecked for meetings ', verbose_name='Is this a zoom webinar ? Leave unchecked if meeting')),
                ('additional_information', models.TextField(blank=True, help_text='Optional Additional information/details', null=True, verbose_name='Additional Information - (Optional)')),
                ('registration_limit', models.PositiveIntegerField(blank=True, help_text='Number of available registrations', null=True, verbose_name='Registration Limit - (Leave blank if no limit)')),
                ('thank_you_text', models.TextField(blank=True, help_text='Text to display after successful submission', null=True)),
                ('validation_field', models.CharField(blank=True, default='email_address', help_text='A field on the form to check if is already submitted so as to prevent multiple submissions by one person. This is usually the email address field in snake casing format', max_length=100)),
                ('send_confirmation_email', models.BooleanField(default=False, help_text='Should we send a confirmation/follow up email ?')),
                ('email_field', models.CharField(blank=True, help_text='The field in the form that corresponds to the email to use. Should be snake_cased', max_length=100)),
                ('email_confirmation_message', wagtail.fields.RichTextField(blank=True, help_text='Message to send to the user. For example zoom links')),
                ('batch_zoom_reg_enabled', models.BooleanField(default=False, help_text='Enable batch option for adding registrants to zoom later', verbose_name='Batch Zoom Registration Enabled - Leave unchecked for direct zoom registrations')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.forms.models.FormMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='EventRegistrationFormTemplateField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('clean_name', models.CharField(blank=True, default='', help_text='Safe name of the form field, the label converted to ascii_snake_case', max_length=255, verbose_name='name')),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma or new line separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.TextField(blank=True, help_text='Default value. Comma or new line separated values supported for checkboxes.', verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('form_template', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='events.eventregistrationformtemplate')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventRegistrationFormField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('clean_name', models.CharField(blank=True, default='', help_text='Safe name of the form field, the label converted to ascii_snake_case', max_length=255, verbose_name='name')),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma or new line separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.TextField(blank=True, help_text='Default value. Comma or new line separated values supported for checkboxes.', verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='registration_form_fields', to='events.eventregistrationpage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('zoom_events_id', models.CharField(blank=True, help_text='Zoom Events Id', max_length=255, null=True)),
                ('zoom_events_url', models.URLField(blank=True, help_text="URL to the Event's page on Zoom for Registration", max_length=500, null=True)),
                ('date_from', models.DateTimeField(help_text='Day of the event. If multi-day, then this should be the first day', verbose_name='Event begin date')),
                ('date_to', models.DateTimeField(blank=True, help_text='Not required if this is a one day event', null=True, verbose_name='End date - Note: Not Required if this is a one day Event')),
                ('timezone', timezone_field.fields.TimeZoneField(default='Africa/Nairobi', help_text='Timezone')),
                ('location', models.CharField(help_text='Where will the event take place ?', max_length=100)),
                ('cost', models.CharField(blank=True, help_text='What is the cost for participating in this event ? Leave blank if free', max_length=100, null=True)),
                ('description', wagtail.fields.RichTextField(help_text='A description of the event ')),
                ('image_placement', models.CharField(choices=[('side', 'Side by Side with Text'), ('top', 'At the top before text')], default='top', max_length=50)),
                ('featured', models.BooleanField(default=False, help_text='Show this event in the events landing page as featured ?')),
                ('is_hidden', models.BooleanField(default=False, help_text='Make this event hidden in events page or elsewhere')),
                ('is_visible_on_homepage', models.BooleanField(default=False, help_text='Show this event on the homepage ?')),
                ('show_in_rcc', models.BooleanField(default=False, help_text='Show this event on RCC Page ?')),
                ('panelists', wagtail.fields.StreamField([('panelist', wagtail.blocks.StructBlock([('name', wagtail.blocks.CharBlock(help_text='Name of panelist', max_length=255)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Select/upload image', required=False)), ('organisation', wagtail.blocks.CharBlock(help_text='Organisation working for or representing', max_length=255, required=False)), ('position', wagtail.blocks.CharBlock(help_text='Position in organisation', max_length=255, required=False)), ('bio', wagtail.blocks.RichTextBlock(help_text='Short bio', label='Short bio', required=False)), ('role', wagtail.blocks.ChoiceBlock(choices=[('moderator', 'Moderator'), ('discussant', 'Discussant')], help_text='Select Role. Leave blank if normal panelist', required=False)), ('topic_title', wagtail.blocks.CharBlock(help_text="Panelist's topic/session", max_length=255, required=False))]))], blank=True, null=True, use_json_field=True)),
                ('sessions', wagtail.fields.StreamField([('session', wagtail.blocks.StructBlock([('start_time', wagtail.blocks.DateTimeBlock(help_text='Session Start Time')), ('end_time', wagtail.blocks.DateTimeBlock(help_text='Session End Time')), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Session Image', required=False)), ('title', wagtail.blocks.TextBlock(help_text='Session title')), ('detail', wagtail.blocks.RichTextBlock(features=['bold', 'ul', 'ol', 'link', 'superscript', 'subscript'], help_text='Detail', required=False)), ('roles', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('name', wagtail.blocks.CharBlock(help_text='Name of person', label='Name of person', max_length=255)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Select/upload image', required=False)), ('role', wagtail.blocks.ChoiceBlock(choices=[('moderator', 'Moderator'), ('speaker', 'Speaker'), ('rapporteur ', 'Rapporteur')], help_text='Select Role', required=False))])))]))], blank=True, null=True, use_json_field=True)),
                ('additional_materials', wagtail.fields.StreamField([('additional_material', wagtail.blocks.StructBlock([('type', wagtail.blocks.ChoiceBlock(choices=[('document', 'Document/File'), ('image', 'Image')])), ('title', wagtail.blocks.CharBlock(max_length=255)), ('document', wagtail.documents.blocks.DocumentChooserBlock(help_text='Select document or file', required=False, verbose_name='Document/File')), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Select/upload image', required=False))]))], blank=True, null=True, use_json_field=True)),
                ('sponsors', wagtail.fields.StreamField([('sponsor', wagtail.blocks.StructBlock([('name', wagtail.blocks.CharBlock(help_text='Name of sponsor', max_length=255)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Select/upload image')), ('link', wagtail.blocks.URLBlock(help_text="Link to sponsor's page", required=False)), ('enlarge', wagtail.blocks.BooleanBlock(help_text='Enlarge image', required=False))]))], blank=True, null=True, use_json_field=True, verbose_name='Acknowledgement/sponsors')),
                ('is_archived', models.BooleanField(default=False)),
                ('registration_open', models.BooleanField(default=True)),
                ('youtube_video_id', models.CharField(blank=True, help_text='Youtube Video ID if the event is being livestreamed', max_length=100)),
                ('meeting_platform', models.CharField(blank=True, choices=[('zoom', 'Zoom')], default='zoom', help_text='Platform for Event', max_length=100, verbose_name='Meeting Registration Integration Platform')),
                ('agenda_document', models.ForeignKey(blank=True, help_text='Agenda document, preferably in PDF format', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.customdocumentmodel', verbose_name='Downloadable agenda document')),
                ('category', modelcluster.fields.ParentalManyToManyField(to='core.servicecategory', verbose_name='Service Categories')),
                ('event_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.eventtype')),
                ('form_template', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.eventregistrationformtemplate')),
                ('image', models.ForeignKey(blank=True, help_text='An image for this event, can be a poster or any relevant image', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Event Image')),
                ('projects', modelcluster.fields.ParentalManyToManyField(blank=True, to='projects.projectpage', verbose_name='Relevant Projects')),
            ],
            options={
                'ordering': ['-date_from'],
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='EventIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('banner_title', models.CharField(max_length=255)),
                ('banner_subtitle', models.CharField(max_length=255)),
                ('call_to_action_button_text', models.CharField(blank=True, max_length=100, null=True)),
                ('events_per_page', models.PositiveIntegerField(default=6, help_text='How many events should be visible on the all events section ?', validators=[django.core.validators.MinValueValidator(6), django.core.validators.MaxValueValidator(20)])),
                ('banner_image', models.ForeignKey(blank=True, help_text='A high quality image related to ICPAC events/trainings', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Banner Image')),
                ('call_to_action_related_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
    ]
