# Generated by Django 4.1.7 on 2023-02-28 13:57

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import positions.fields
import wagtail.blocks
import wagtail.documents.blocks
import wagtail.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('videos', '0001_initial'),
        ('wagtailcore', '0083_workflowcontenttype'),
        ('core', '0003_newstype'),
        ('wagtailimages', '0025_alter_image_file_alter_rendition_file'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProjectPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('full_name', models.CharField(help_text='Name of the project', max_length=200, verbose_name='Project full name')),
                ('short_name', models.CharField(help_text='Short name of the project', max_length=50, verbose_name='Project short name')),
                ('call_to_action_button_text', models.CharField(blank=True, max_length=20, null=True)),
                ('call_to_action_external_link', models.URLField(blank=True, help_text='External Link if applicable', null=True)),
                ('begin_date', models.DateField()),
                ('end_date', models.DateField()),
                ('introduction_title', models.TextField(help_text='This can be the main objective of the project in one sentence', verbose_name='Project Tagline')),
                ('introduction_text', wagtail.fields.RichTextField(help_text='A description of this project', verbose_name='Project summary')),
                ('introduction_button_text', models.TextField(blank=True, max_length=20, null=True)),
                ('introduction_button_link_external', models.URLField(blank=True, help_text='External Link if applicable. Ignored if internal page above is chosen', null=True)),
                ('goals_block', wagtail.fields.StreamField([('goal', wagtail.blocks.StructBlock([('heading', wagtail.blocks.CharBlock()), ('description', wagtail.blocks.RichTextBlock(features=['bold', 'ul', 'ol', 'link', 'superscript', 'subscript'])), ('image', wagtail.images.blocks.ImageChooserBlock(required=False))]))], blank=True, null=True, use_json_field=None, verbose_name='Goals')),
                ('feature_block', wagtail.fields.StreamField([('feature_item', wagtail.blocks.StructBlock([('figure_type', wagtail.blocks.ChoiceBlock(choices=[('image', 'Image'), ('chart', 'Chart'), ('video', 'Video'), ('imageofchange', 'Image of Change')])), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('chart_config_url', wagtail.blocks.URLBlock(help_text='A URL that returns Highcharts.js configuration, including the data', required=False)), ('title', wagtail.blocks.CharBlock()), ('text', wagtail.blocks.TextBlock(label='Description')), ('action_link_text', wagtail.blocks.CharBlock(max_length=15, required=False)), ('action_link', wagtail.blocks.PageChooserBlock(label='Action Link Internal', required=False)), ('action_link_external', wagtail.blocks.URLBlock(help_text='An external link to a detailed resource on the internet.If provided, the internal link will be ignored', max_length=400, required=False))]))], blank=True, null=True, use_json_field=None)),
                ('project_materials', wagtail.fields.StreamField([('material', wagtail.blocks.StructBlock([('category', wagtail.blocks.CharBlock(max_length=255)), ('materials', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('type', wagtail.blocks.ChoiceBlock(choices=[('document', 'Document/File'), ('image', 'Image')])), ('title', wagtail.blocks.CharBlock(max_length=255)), ('document', wagtail.documents.blocks.DocumentChooserBlock(help_text='Select document or file', required=False, verbose_name='Document/File')), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Select/upload image', required=False))])))]))], blank=True, null=True, use_json_field=None)),
                ('banner_image', models.ForeignKey(blank=True, help_text='A high quality image related to this Project, that appears on the top banner', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Project Banner Image')),
                ('call_to_action_related_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
                ('introduction_button_link', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
                ('introduction_image', models.ForeignKey(blank=True, help_text='A high quality image related this project', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Introduction Image')),
            ],
            options={
                'verbose_name': 'Project',
                'ordering': ['-end_date'],
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ServiceProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', positions.fields.PositionField(default=-1)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.projectpage')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.servicecategory')),
            ],
            options={
                'ordering': ['position'],
                'unique_together': {('service', 'project')},
            },
        ),
        migrations.AddField(
            model_name='projectpage',
            name='services',
            field=modelcluster.fields.ParentalManyToManyField(related_name='projects', through='projects.ServiceProject', to='core.servicecategory'),
        ),
        migrations.AddField(
            model_name='projectpage',
            name='youtube_playlist',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='videos.youtubeplaylist'),
        ),
        migrations.CreateModel(
            name='ProjectIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('banner_title', models.CharField(max_length=255)),
                ('banner_subtitle', models.CharField(blank=True, max_length=255, null=True)),
                ('call_to_action_button_text', models.CharField(blank=True, max_length=100, null=True)),
                ('introduction_title', models.CharField(help_text='Introduction section title', max_length=100)),
                ('introduction_text', wagtail.fields.RichTextField(help_text='A description of ORG Projects in general')),
                ('introduction_button_text', models.TextField(blank=True, max_length=20, null=True)),
                ('items_per_page', models.PositiveIntegerField(default=6, help_text='How many items should be visible on the projects landing page filter section ?', validators=[django.core.validators.MinValueValidator(6), django.core.validators.MaxValueValidator(20)])),
                ('banner_image', models.ForeignKey(blank=True, help_text='A high quality image related to Projects', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Banner Image')),
                ('call_to_action_related_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
                ('introduction_button_link', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
                ('introduction_image', models.ForeignKey(blank=True, help_text='A high quality image related to Projects', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Introduction Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
    ]
