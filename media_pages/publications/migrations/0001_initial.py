# Generated by Django 4.1.9 on 2023-05-15 12:14

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('projects', '0001_initial'),
        ('taggit', '0004_alter_taggeditem_content_type_alter_taggeditem_tag'),
        ('core', '0001_initial'),
        ('wagtailimages', '0025_alter_image_file_alter_rendition_file'),
        ('wagtailcore', '0083_workflowcontenttype'),
    ]

    operations = [
        migrations.CreateModel(
            name='PublicationPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('summary', wagtail.fields.RichTextField(verbose_name='Summary')),
                ('publication_date', models.DateField(default=datetime.date.today, verbose_name='Date of Publish')),
                ('is_visible_on_homepage', models.BooleanField(default=False, help_text='Should this appear in the homepage as an alert/latest update ?', verbose_name='Is visible on homepage')),
                ('featured', models.BooleanField(default=False, help_text='Featured publications appear on the publications landing page', verbose_name='Mark as featured')),
                ('period_start_date', models.DateField(blank=True, help_text='Optional start date for which this publication is relevant', null=True, verbose_name='Start date')),
                ('period_end_date', models.DateField(blank=True, help_text='Optional end date for which this publication is relevant', null=True, verbose_name='End date')),
                ('peer_reviewed', models.BooleanField(default=False, help_text='Is this a peer reviewed publication ?', verbose_name='Peer reviewed')),
                ('external_publication_url', models.URLField(blank=True, help_text='Link to published resource if external', max_length=500, null=True, verbose_name='External Url - *Only If published/hosted somewhere else')),
                ('categories', modelcluster.fields.ParentalManyToManyField(to='core.servicecategory', verbose_name='Services related to this publication')),
                ('document', models.ForeignKey(blank=True, help_text='Here you can upload pdfs, word documents, powerpoints, zip files or any other file', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.customdocumentmodel', verbose_name='Document or File')),
                ('projects', modelcluster.fields.ParentalManyToManyField(blank=True, to='projects.projectpage', verbose_name='Relevant Projects')),
                ('publication_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.publicationtype', verbose_name='Publication Type')),
            ],
            options={
                'verbose_name': 'Publication',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='PublicationsIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('banner_title', models.CharField(max_length=255, verbose_name='Banner Title')),
                ('banner_subtitle', models.CharField(max_length=255, verbose_name='Banner Subtitle')),
                ('call_to_action_button_text', models.CharField(blank=True, max_length=100, null=True, verbose_name='Call to action button text')),
                ('earliest_publication_year', models.PositiveIntegerField(default=2023, help_text='The year for the earliest available publication. This is used to generate the years available for filtering ', validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2023)], verbose_name='Earliest Publication Year')),
                ('publications_per_page', models.PositiveIntegerField(default=6, help_text='How many publications per page should be visible on the all publications section ?', validators=[django.core.validators.MinValueValidator(6), django.core.validators.MaxValueValidator(20)])),
                ('banner_image', models.ForeignKey(blank=True, help_text='A high quality image related to Publications', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Banner Image')),
                ('call_to_action_related_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page', verbose_name='Call to action related page')),
            ],
            options={
                'verbose_name': 'Publications Index Page',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='PublicationPageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='publications_tags', to='publications.publicationpage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='publicationpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='publications.PublicationPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='publicationpage',
            name='thumbnail',
            field=models.ForeignKey(blank=True, help_text='This can be a screenshot of the front page of the publication', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Publication image'),
        ),
    ]
