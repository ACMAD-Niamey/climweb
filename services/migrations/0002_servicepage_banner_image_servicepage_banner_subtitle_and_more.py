# Generated by Django 4.1.7 on 2023-02-28 14:21

import integrations.webicons.blocks
from django.db import migrations, models
import django.db.models.deletion
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_application_serviceapplication_application_services_and_more'),
        ('wagtailimages', '0025_alter_image_file_alter_rendition_file'),
        ('wagtailcore', '0083_workflowcontenttype'),
        ('videos', '0001_initial'),
        ('services', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='servicepage',
            name='banner_image',
            field=models.ForeignKey(blank=True, help_text='A high quality image related to Climate Change', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Banner Image'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='banner_subtitle',
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='banner_title',
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='call_to_action_button_text',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='call_to_action_external_link',
            field=models.URLField(blank=True, help_text='External Link if applicable', null=True),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='call_to_action_related_page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='feature_block_items',
            field=wagtail.fields.StreamField([('feature_item', wagtail.blocks.StructBlock([('figure_type', wagtail.blocks.ChoiceBlock(choices=[('image', 'Image'), ('chart', 'Chart'), ('video', 'Video'), ('imageofchange', 'Image of Change')])), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('chart_config_url', wagtail.blocks.URLBlock(help_text='A URL that returns Highcharts.js configuration, including the data', required=False)), ('title', wagtail.blocks.CharBlock()), ('text', wagtail.blocks.TextBlock(label='Description')), ('action_link_text', wagtail.blocks.CharBlock(max_length=15, required=False)), ('action_link', wagtail.blocks.PageChooserBlock(label='Action Link Internal', required=False)), ('action_link_external', wagtail.blocks.URLBlock(help_text='An external link to a detailed resource on the internet.If provided, the internal link will be ignored', max_length=400, required=False))]))], blank=True, null=True, use_json_field=True),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='introduction_button_link',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='introduction_button_link_external',
            field=models.URLField(blank=True, help_text='External Link if applicable. Ignored if internal page above is chosen', null=True),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='introduction_button_text',
            field=models.TextField(blank=True, max_length=20, null=True),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='introduction_image',
            field=models.ForeignKey(blank=True, help_text='A high quality image related to Climate Change', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Introduction Image'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='introduction_text',
            field=wagtail.fields.RichTextField(help_text='A description of what ORG does under  Climate Change', null=True),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='introduction_title',
            field=models.CharField(help_text='Introduction section title', max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='projects_description',
            field=wagtail.fields.RichTextField(blank=True, help_text='Projects description text', null=True),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='service',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='core.servicecategory'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='what_we_do_button_link',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page'),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='what_we_do_button_text',
            field=models.TextField(blank=True, max_length=20, null=True),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='what_we_do_items',
            field=wagtail.fields.StreamField([('what_we_do', wagtail.blocks.StructBlock([('icon', integrations.webicons.blocks.WebIconChooserBlock()), ('title', wagtail.blocks.CharBlock(max_length=60, required=False)), ('description', wagtail.blocks.CharBlock())]))], blank=True, null=True, use_json_field=True),
        ),
        migrations.AddField(
            model_name='servicepage',
            name='youtube_playlist',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='videos.youtubeplaylist'),
        ),
    ]
